# -*- coding: utf-8 -*-
"""nut_Appe.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1OATNmPmOJN2V60oQp-yNSOzmS6Viwk4D
"""

#pip install google-generativeai ==

#pip install python-dotenv

#pip install streamlit

#pip install Pillow
import pip 
pip.main(['install', '-q', '-U', 'google-generativeai','streamlit','Pillow'])
import google.generativeai as genai
#from dotenv import load_dotenv
#load_dotenv() ## load all the environment variables
import streamlit as st
#import os
from PIL import Image

# Replace with your actual API key
GOOGLE_API_KEY = "AIzaSyDNk8VoIypEpIaAq_wBY3N1PKuXP6LGk9M"
genai.configure(api_key=GOOGLE_API_KEY)

def get_gemini_response(input_prompt, image_data, user_input):
  """
  Gets the response from the generative model, combining input and prompt.

  Args:
      input_prompt: The base prompt to guide the generation.
      image_data: The processed image data from the uploaded file.
      user_input: Additional user input to refine the generation.

  Returns:
      The generated text response from the model.
  """
  model = genai.GenerativeModel('gemini-pro-vision')

  # Combine input and prompt into a single string
  combined_prompt = f"{input_prompt}{user_input}"

  try:
    response = model.generate_content((combined_prompt, image_data[0]))
    return response.text
  except (TypeError, ValueError) as e:
    # Handle potential errors gracefully, e.g., log the error or provide informative feedback
    error_message = f"Error generating response: {e}"
    st.error(error_message)
    return None  # Or return an empty string or default value

# Rest of your code using get_gemini_response


def input_image_setup(uploaded_file):
  if uploaded_file is not None:
    bytes_data = uploaded_file.getvalue()
    image_parts = [
        {"mime_type": uploaded_file.type, "data": bytes_data}
    ]
    return image_parts
  else:
    raise FileNotFoundError("No file uploaded")


input_prompt = """
You are an expert nutritionist. Analyze the food items in the image and calculate the total calories. Provide the details of each food item and its calorie intake in the following format:

1. Item 1 - no of calories
2. Item 2 - no of calories
----
----
Total Calories:
"""

st.set_page_config(page_title="AI Nutritionist App")
st.header("AI Nutritionist App")

uploaded_file = st.file_uploader("Choose an image...", type=["jpg", "jpeg", "png"])

image = ""

if uploaded_file is not None:
  image = Image.open(uploaded_file)
  st.image(image, caption="Uploaded Image.", use_column_width=True)

submit = st.button("Analyze Food & Calculate Calories")

if submit:
  try:
    image_data = input_image_setup(uploaded_file)
    response = get_gemini_response(input_prompt, image_data, "")  # No additional user input here
    st.subheader("Nutrition Analysis:")
    st.write(response)
  except FileNotFoundError:
    st.error("Please upload an image.")